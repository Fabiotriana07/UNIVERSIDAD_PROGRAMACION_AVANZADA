/****
Fecha:22-mayo-2023
Autor:Fabio Triana
Problema:
1 Descripción del problema
El taller consiste en simular una tienda de productos electrónicos que ofrece la opción de
garantía extendida para ciertos productos. Para ello, se requiere implementar el concepto de
clases abstractas y polimorfismo.
2 Descripción del Taller
La tienda cuenta con una clase abstracta base llamada 'ProductoElectronico', que contiene
atributos como 'nombre', 'precio' y 'garantia' y métodos como ‘getNombre’, ‘getPrecio’,
‘getGarantia’ y ‘cargar’, método que imprimirá en pantalla cuánto tiempo demora en cargar el
equipo dada por parámetros una carga inicial (a disposición del estudiante los tiempos de
carga a usar). Además, se deben crear al menos dos clases derivadas, como 'Celular' y
'Computadora', que hereden de 'ProductoElectronico' y añadan atributos y métodos
específicos de cada tipo de producto, ya que contarán con precios, nombres y garantías
diferentes.
Teniendo esto en cuenta, se deberán crear 3 métodos aparte en las clases hija que deberán
tener un comportamiento diferente a la de su padre. El programa principal deberá crear un
ArrayList de tipo ProductoElectronico y esta deberá ser llenada con 2 objetos de cada una de
las clases hijas. Posteriormente, se deberá recorrer esta lista y objeto por objeto se deberán
mostrar en pantalla como cambia el comportamiento de cada instancia teniendo en cuenta si
es un computador, celular, etc. Ejecutando todos los métodos implementados.
Cabe resaltar que para un correcto uso de una clase abstracta sus clases hijas deberán
implementar todos los métodos definidos en la clase principal.
3 Evaluación
El programa deberá contar con un menú en el cual permita crear los objetos, inicializándolos
con la información pedida en pantalla, siendo agregados automáticamente a la lista y
posteriormente presentando la opción de recorrer el ArrayList.
El código debe estar debidamente comentado para entender el funcionamiento de este y
evidenciar el entendimiento del estudiante de los temas a evaluar.
Finalmente, será evaluado el uso correcto de los conceptos de abstracción y polimorfismo,
además de las prácticas básicas de buena programación, como un código ordenado, nombres
de métodos, variables y clases acordes al problema y correcta identación.
El código debe ser entregado en una carpeta comprimida que contenga el proyecto con las
clases y funcionalidades solicitadas. 
***/

import java.util.ArrayList;
import java.util.Scanner;

// Clase abstracta base 'ProductoElectronico'
abstract class ProductoElectronico {
    private String nombre;
    private double precio;
    private int garantia;

    // Constructor de la clase base
    public ProductoElectronico(String nombre, double precio, int garantia) {
        this.nombre = nombre;
        this.precio = precio;
        this.garantia = garantia;
    }

    // Métodos de acceso
    public String getNombre() {
        return nombre;
    }

    public double getPrecio() {
        return precio;
    }

    public int getGarantia() {
        return garantia;
    }

    // Método abstracto 'cargar()' que debe ser implementado por las clases hijas
    public abstract void cargar();

    // Método para mostrar la información del producto
    public void mostrarInformacion() {
        System.out.println("Nombre: " + nombre);
        System.out.println("Precio: $" + precio);
        System.out.println("Garantía: " + garantia + " meses");
    }
}

// Clase 'Celular' que hereda de 'ProductoElectronico'
class Celular extends ProductoElectronico {
    private String modelo;

    // Constructor de la clase 'Celular'
    public Celular(String nombre, double precio, int garantia, String modelo) {
        super(nombre, precio, garantia);
        this.modelo = modelo;
    }

    // Implementación del método 'cargar()' específico para los celulares
    public void cargar() {
        System.out.println("Cargando el celular " + getModelo() + "...");
        // Lógica de carga específica para celulares
    }

    // Método para obtener el modelo del celular
    public String getModelo() {
        return modelo;
    }
}

// Clase 'Computadora' que hereda de 'ProductoElectronico'
class Computadora extends ProductoElectronico {
    private String marca;

    // Constructor de la clase 'Computadora'
    public Computadora(String nombre, double precio, int garantia, String marca) {
        super(nombre, precio, garantia);
        this.marca = marca;
    }

    // Implementación del método 'cargar()' específico para las computadoras
    public void cargar() {
        System.out.println("Cargando la computadora de marca " + getMarca() + "...");
        // Lógica de carga específica para computadoras
    }

    // Método para obtener la marca de la computadora
    public String getMarca() {
        return marca;
    }
}

// Clase principal 'TiendaElectronica'
public class TiendaElectronica {
    public static void main(String[] args) {
        ArrayList<ProductoElectronico> productos = new ArrayList<>(); // ArrayList para almacenar los productos
        Scanner scanner = new Scanner(System.in);

        int opcion = 0;
        while (opcion != 3) {
            System.out.println("Menu:");
            System.out.println("1. Crear producto");
            System.out.println("2. Mostrar productos");
            System.out.println("3. Salir");
            System.out.print("Seleccione una opción: ");
            opcion = scanner.nextInt();

            switch (opcion) {
                case 1:
                    System.out.println("Crear producto:");
                    System.out.print("Nombre: ");
                    String nombre = scanner.next();
                    System.out.print("Precio: ");
                    double precio = scanner.nextDouble();
                    System.out.print("Garantía (meses): ");
                    int garantia = scanner.nextInt();
                    System.out.print("Tipo (1 - Celular, 2 - Computadora): ");
                    int tipo = scanner.nextInt();

                    ProductoElectronico producto;
                    if (tipo == 1) {
                        System.out.print("Modelo del celular: ");
                        String modelo = scanner.next();
                        producto = new Celular(nombre, precio, garantia, modelo);
                    } else if (tipo == 2) {
                        System.out.print("Marca de la computadora: ");
                        String marca = scanner.next();
                        producto = new Computadora(nombre, precio, garantia, marca);
                    } else {
                        System.out.println("Opción inválida.");
                        continue;
                    }

                    productos.add(producto); // Agregar el producto creado a la lista
                    System.out.println("Producto creado y agregado a la lista.");
                    break;

                case 2:
                    System.out.println("Mostrar productos:");
                    for (ProductoElectronico p : productos) {
                        p.mostrarInformacion();
                        p.cargar();
                        System.out.println("--------------------");
                    }
                    break;

                case 3:
                    System.out.println("¡Chao!");
                    break;

                default:
                    System.out.println("Opción inválida.");
                    break;
            }
        }

        scanner.close();
    }
}

